{
    "C:\\Users\\szhang\\github\\EnneadTab-OS\\Apps\\lib\\EnneadTab\\RHINO\\Enneaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaad.menu\\Installation.button\\Installation_left.py": {
        "script": "C:\\Users\\szhang\\github\\EnneadTab-OS\\Apps\\lib\\EnneadTab\\RHINO\\Enneaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaad.menu\\Installation.button\\Installation_left.py",
        "icon": "C:\\Users\\szhang\\github\\EnneadTab-OS\\Apps\\lib\\EnneadTab\\RHINO\\Enneaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaad.menu\\Installation.button\\icon.png",
        "alias": "Install EnneadTab",
        "doc": "Install EnneadTab"
    },
    "Ennead+.menu\\create_new_button.button\\new_button_left.py": {
        "script": "Ennead+.menu\\create_new_button.button\\new_button_left.py",
        "icon": "c:\\Users\\szhang\\github\\EnneadTab-OS\\DarkSide\\RuiWriter\\.\\default_icon.png",
        "alias": "Make A New Button",
        "doc": null
    },
    "Ennead+.menu\\extract_preview_images.button\\extract_preview_images_left.py": {
        "script": "Ennead+.menu\\extract_preview_images.button\\extract_preview_images_left.py",
        "icon": "c:\\Users\\szhang\\github\\EnneadTab-OS\\DarkSide\\RuiWriter\\.\\default_icon.png",
        "alias": "ExtractPreviewImages",
        "doc": "This button does ExtractPreviewImages when left click"
    },
    "Ennead+.menu\\get_latest.button\\get_latest_left.py": {
        "script": "Ennead+.menu\\get_latest.button\\get_latest_left.py",
        "icon": "c:\\Users\\szhang\\github\\EnneadTab-OS\\DarkSide\\RuiWriter\\.\\default_icon.png",
        "alias": "GetLatest",
        "doc": "This button does GetLatest when left click"
    },
    "Ennead+.menu\\how_to_install.button\\how_to_install_left.py": {
        "script": "Ennead+.menu\\how_to_install.button\\how_to_install_left.py",
        "icon": "Ennead+.menu\\how_to_install.button\\icon.png",
        "alias": "HowToInstall",
        "doc": "This button does HowToInstall when left click"
    },
    "Ennead+.menu\\reset_all_conduit.button\\reset_all_conduit_left.py": {
        "script": "Ennead+.menu\\reset_all_conduit.button\\reset_all_conduit_left.py",
        "icon": "Ennead+.menu\\reset_all_conduit.button\\icon.png",
        "alias": "ResetAllConduit",
        "doc": "Reset all conduits"
    },
    "Ennead+.menu\\star.button\\star_left.py": {
        "script": "Ennead+.menu\\star.button\\star_left.py",
        "icon": "Ennead+.menu\\star.button\\icon.png",
        "alias": "MakeStar",
        "doc": null
    },
    "Ennead+.menu\\youtube_playlist.button\\youtube_playlist_left.py": {
        "script": "Ennead+.menu\\youtube_playlist.button\\youtube_playlist_left.py",
        "icon": "Ennead+.menu\\youtube_playlist.button\\icon.png",
        "alias": "YoutubePlaylist",
        "doc": "Checkout pre-recorded turtorials and demos about EnneadTab."
    },
    "Block.tab\\batch_rename_blocks.button\\batch_rename_blocks_left.py": {
        "script": "Block.tab\\batch_rename_blocks.button\\batch_rename_blocks_left.py",
        "icon": "Block.tab\\batch_rename_blocks.button\\icon.png",
        "alias": "BatchRenameBlocks",
        "doc": "Rename Block Names In a table"
    },
    "Block.tab\\edit_distorted_block.button\\edit_distorted_block_left.py": {
        "script": "Block.tab\\edit_distorted_block.button\\edit_distorted_block_left.py",
        "icon": "Block.tab\\edit_distorted_block.button\\icon.png",
        "alias": "EditDistortedBlock",
        "doc": "Edit distorted block by editing a copy."
    },
    "Block.tab\\edit_distorted_block.button\\edit_distorted_block_right.py": {
        "script": "Block.tab\\edit_distorted_block.button\\edit_distorted_block_right.py",
        "icon": "Block.tab\\edit_distorted_block.button\\icon.png",
        "alias": "EditDistortedBlockRestoreView",
        "doc": "Go back to previous view stage"
    },
    "Block.tab\\fall_geos_on_geo.button\\fall_geos_on_geo_left.py": {
        "script": "Block.tab\\fall_geos_on_geo.button\\fall_geos_on_geo_left.py",
        "icon": "Block.tab\\fall_geos_on_geo.button\\icon.png",
        "alias": "FallGeosOnGeo",
        "doc": "Drop selected objs to a receiver geo. If it is block, drop using the insertion point. Otherwise using the center of buttom face of the boundingbox."
    },
    "Block.tab\\filter_block_by_name.button\\filter_block_by_name_left.py": {
        "script": "Block.tab\\filter_block_by_name.button\\filter_block_by_name_left.py",
        "icon": "Block.tab\\filter_block_by_name.button\\icon.png",
        "alias": "FilterBlockByName",
        "doc": "This button does FilterBlockByName when left click"
    },
    "Block.tab\\make_block_unique.button\\make_block_unique_left.py": {
        "script": "Block.tab\\make_block_unique.button\\make_block_unique_left.py",
        "icon": "Block.tab\\make_block_unique.button\\icon.png",
        "alias": [
            "MakeBlockUnique",
            "MBU"
        ],
        "doc": "Make a block unique on spot. Each unique original block become new unique block."
    },
    "Block.tab\\make_block_unique.button\\make_block_unique_right.py": {
        "script": "Block.tab\\make_block_unique.button\\make_block_unique_right.py",
        "icon": "Block.tab\\make_block_unique.button\\icon.png",
        "alias": "MakeBlockUniqueToOne",
        "doc": "Make a block unique on spot. All different types of block will merge to one new block"
    },
    "Block.tab\\match_texture_mapping_in_block.button\\match_texture_mapping_in_block_left.py": {
        "script": "Block.tab\\match_texture_mapping_in_block.button\\match_texture_mapping_in_block_left.py",
        "icon": "Block.tab\\match_texture_mapping_in_block.button\\icon.png",
        "alias": "MatchTextureMappingInBlock",
        "doc": "Pick a source block, then apply the texture mapping of this block to other blocks selected."
    },
    "Block.tab\\package_block_layer.button\\package_block_layer_left.py": {
        "script": "Block.tab\\package_block_layer.button\\package_block_layer_left.py",
        "icon": "Block.tab\\package_block_layer.button\\icon.png",
        "alias": "PackageBlockLayer",
        "doc": "Package blocks content layer under a single parent layer. This is very helpful if you want to test totally new material for the layers."
    },
    "Block.tab\\randomize_block_transformation.button\\randomize_block_transformation_left.py": {
        "script": "Block.tab\\randomize_block_transformation.button\\randomize_block_transformation_left.py",
        "icon": "Block.tab\\randomize_block_transformation.button\\icon.png",
        "alias": "RandomizeBlockTransformation",
        "doc": "Randomly transform block transformation for rotation and scale."
    },
    "Block.tab\\random_blocks_on_srfs.button\\random_blocks_on_srfs_left.py": {
        "script": "Block.tab\\random_blocks_on_srfs.button\\random_blocks_on_srfs_left.py",
        "icon": "Block.tab\\random_blocks_on_srfs.button\\icon.png",
        "alias": "RandomBlocksOnSrfs",
        "doc": "Randomly create blocks on mutiple srfs, away from edge, along edge, or evenly on edge. It also allow pick guiding crv(s) or use edge as guides."
    },
    "Block.tab\\sample_layout.button\\sample_layout_left.py": {
        "script": "Block.tab\\sample_layout.button\\sample_layout_left.py",
        "icon": "Block.tab\\sample_layout.button\\icon.png",
        "alias": "SampleLayout",
        "doc": "Create sample block layout along crvs to quickly visualize design."
    },
    "Block.tab\\similar_blocks.button\\similar_blocks_left.py": {
        "script": "Block.tab\\similar_blocks.button\\similar_blocks_left.py",
        "icon": "Block.tab\\similar_blocks.button\\icon.png",
        "alias": "SelectSimilarBlocks",
        "doc": "Select blocks of similar definitions from the selected blocks"
    },
    "Block.tab\\similar_blocks.button\\similar_blocks_right.py": {
        "script": "Block.tab\\similar_blocks.button\\similar_blocks_right.py",
        "icon": "Block.tab\\similar_blocks.button\\icon.png",
        "alias": "IsolateSimilarBlocks",
        "doc": "Isolate blocks of similar definitions from the selected blocks"
    },
    "Block.tab\\toggle_block_color_display.button\\toggle_block_color_display_left.py": {
        "script": "Block.tab\\toggle_block_color_display.button\\toggle_block_color_display_left.py",
        "icon": "Block.tab\\toggle_block_color_display.button\\icon.png",
        "alias": "ToggleBlockColorDisplay",
        "doc": "Toggle on/off for highlighting the different block type. Very helpful when you have many block variation."
    },
    "Block.tab\\toggle_block_color_display.button\\display_setting_right.py": {
        "script": "Block.tab\\toggle_block_color_display.button\\display_setting_right.py",
        "icon": "Block.tab\\toggle_block_color_display.button\\icon.png",
        "alias": "ToggleBlockColorDisplay_Setting",
        "doc": "Toggle the on/off of block names."
    },
    "Block.tab\\uniform_transform_blocks.button\\uniform_transform_blocks_left.py": {
        "script": "Block.tab\\uniform_transform_blocks.button\\uniform_transform_blocks_left.py",
        "icon": "Block.tab\\uniform_transform_blocks.button\\icon.png",
        "alias": "UniformTransformBlocks",
        "doc": "Apply same rotational transformation for the blocks. Helpful when you have to reorient many directional blocks, such as changing the direction of cars on street."
    },
    "Create.tab\\stair_maker.button\\stair_maker_left.py": {
        "script": "Create.tab\\stair_maker.button\\stair_maker_left.py",
        "icon": "Create.tab\\stair_maker.button\\icon.png",
        "alias": [
            "StairMaker",
            "StairMaker(Linear)"
        ],
        "doc": "Interactively create linear stair."
    },
    "Create.tab\\stair_maker.button\\stair_maker_right.py": {
        "script": "Create.tab\\stair_maker.button\\stair_maker_right.py",
        "icon": "Create.tab\\stair_maker.button\\icon.png",
        "alias": "StairMaker(Spiral)",
        "doc": "Interactively create spiral stair."
    },
    "Drafting.tab\\duplicate_layout.button\\duplicate_layout_left.py": {
        "script": "Drafting.tab\\duplicate_layout.button\\duplicate_layout_left.py",
        "icon": "Drafting.tab\\duplicate_layout.button\\icon.png",
        "alias": "DuplicateLayout",
        "doc": "Duplicate Layout while allowing X-Y offset, so your layout can capture something else in model space."
    },
    "Drafting.tab\\export_selected_pages.button\\export_selected_pages_left.py": {
        "script": "Drafting.tab\\export_selected_pages.button\\export_selected_pages_left.py",
        "icon": "Drafting.tab\\export_selected_pages.button\\icon.png",
        "alias": "ExportSelectedLayout",
        "doc": "Export selected layout(s) to pdf"
    },
    "Drafting.tab\\section_crowd.button\\section_crowd_left.py": {
        "script": "Drafting.tab\\section_crowd.button\\section_crowd_left.py",
        "icon": "Drafting.tab\\section_crowd.button\\icon.png",
        "alias": "SectionCrowd",
        "doc": "Populate people interactively in TOP view by providing two points."
    },
    "Drafting.tab\\visualize_excel.button\\visualize_excel_left.py": {
        "script": "Drafting.tab\\visualize_excel.button\\visualize_excel_left.py",
        "icon": "Drafting.tab\\visualize_excel.button\\icon.png",
        "alias": "VisualizeExcel",
        "doc": "Convert excel data to shape diagrams."
    },
    "Drafting.tab\\visualize_excel.button\\visualize_excel_right.py": {
        "script": "Drafting.tab\\visualize_excel.button\\visualize_excel_right.py",
        "icon": "Drafting.tab\\visualize_excel.button\\icon.png",
        "alias": "OpenSampleExcel",
        "doc": "Open the sample excel with placeholder area size info."
    },
    "File.tab\\archive_file.button\\archive_file_left.py": {
        "script": "File.tab\\archive_file.button\\archive_file_left.py",
        "icon": "File.tab\\archive_file.button\\icon.png",
        "alias": "ArchiveFile",
        "doc": "Archive files based on today's date, creation date or last modifyed date."
    },
    "File.tab\\bind_worksession.button\\bind_worksession_left.py": {
        "script": "File.tab\\bind_worksession.button\\bind_worksession_left.py",
        "icon": "File.tab\\bind_worksession.button\\icon.png",
        "alias": "BindWorksession",
        "doc": "Flatten the worksession to single file with named parent layer as file. Good for preparing files before sending out."
    },
    "File.tab\\create_worksession.button\\create_worksession_left.py": {
        "script": "File.tab\\create_worksession.button\\create_worksession_left.py",
        "icon": "File.tab\\create_worksession.button\\icon.png",
        "alias": "CreateWorksession",
        "doc": "Pick mutiple rhino files to create a session file instead of one after another. Good for dealing with heavy files."
    },
    "File.tab\\external_trimmer.button\\external_trimmer_left.py": {
        "script": "File.tab\\external_trimmer.button\\external_trimmer_left.py",
        "icon": "File.tab\\external_trimmer.button\\icon.png",
        "alias": "ExternalTrimmer",
        "doc": "This button does ExternalTrimmer when left click"
    },
    "File.tab\\external_trimmer.button\\external_trimmer_right.py": {
        "script": "File.tab\\external_trimmer.button\\external_trimmer_right.py",
        "icon": "File.tab\\external_trimmer.button\\icon.png",
        "alias": "ExternalTrimmer",
        "doc": "This button does ExternalTrimmer when right click"
    },
    "File.tab\\save_small_and_close.button\\save_small_and_close_left.py": {
        "script": "File.tab\\save_small_and_close.button\\save_small_and_close_left.py",
        "icon": "File.tab\\save_small_and_close.button\\icon.png",
        "alias": "SaveSmallAndClose",
        "doc": "Save small file and close document. You dont need to wait."
    },
    "Fun.tab\\dvd.button\\dvd_left.py": {
        "script": "Fun.tab\\dvd.button\\dvd_left.py",
        "icon": "Fun.tab\\dvd.button\\icon.png",
        "alias": "DVD",
        "doc": "This button does Dvd when left click"
    },
    "Knowledge.tab\\alias_cheatsheet.button\\alias_cheatsheet_left.py": {
        "script": "Knowledge.tab\\alias_cheatsheet.button\\alias_cheatsheet_left.py",
        "icon": "Knowledge.tab\\alias_cheatsheet.button\\icon.png",
        "alias": "AliasCheatsheet",
        "doc": "Learn about ALL the EnneadTab alias."
    },
    "Knowledge.tab\\china_code_ref.button\\china_code_ref_left.py": {
        "script": "Knowledge.tab\\china_code_ref.button\\china_code_ref_left.py",
        "icon": "Knowledge.tab\\china_code_ref.button\\icon.png",
        "alias": "ChinaCodeRef",
        "doc": "This button does ChinaCodeRef when left click"
    },
    "Knowledge.tab\\perforation_ratio.button\\perforation_ratio_left.py": {
        "script": "Knowledge.tab\\perforation_ratio.button\\perforation_ratio_left.py",
        "icon": "Knowledge.tab\\perforation_ratio.button\\icon.png",
        "alias": "PerforationRatio",
        "doc": "Find out how to calculate your perforation panel with precise opening ratio."
    },
    "Knowledge.tab\\place_asset.button\\place_asset_left.py": {
        "script": "Knowledge.tab\\place_asset.button\\place_asset_left.py",
        "icon": "Knowledge.tab\\place_asset.button\\icon.png",
        "alias": "PlaceAsset",
        "doc": "This button does PlaceAsset when left click"
    },
    "Knowledge.tab\\search_command.button\\search_command_left.py": {
        "script": "Knowledge.tab\\search_command.button\\search_command_left.py",
        "icon": "Knowledge.tab\\search_command.button\\icon.png",
        "alias": "SearchCommand",
        "doc": "Learn all the buttons functions."
    },
    "Knowledge.tab\\slope_calculator.button\\slope_calculator_left.py": {
        "script": "Knowledge.tab\\slope_calculator.button\\slope_calculator_left.py",
        "icon": "Knowledge.tab\\slope_calculator.button\\icon.png",
        "alias": "SlopeCalculator",
        "doc": "This button does SlopeCalculator when left click"
    },
    "Knowledge.tab\\turtorial.button\\turtorial_left.py": {
        "script": "Knowledge.tab\\turtorial.button\\turtorial_left.py",
        "icon": "Knowledge.tab\\turtorial.button\\icon.png",
        "alias": "Turtorial",
        "doc": "This button does Turtorial when left click"
    },
    "Lab.tab\\tester.button\\tester_left.py": {
        "script": "Lab.tab\\tester.button\\tester_left.py",
        "icon": "c:\\Users\\szhang\\github\\EnneadTab-OS\\DarkSide\\RuiWriter\\.\\default_icon.png",
        "alias": "tester",
        "doc": "tester"
    },
    "Lab.tab\\update_from_repo.button\\update_from_repo_left.py": {
        "script": "Lab.tab\\update_from_repo.button\\update_from_repo_left.py",
        "icon": "c:\\Users\\szhang\\github\\EnneadTab-OS\\DarkSide\\RuiWriter\\.\\default_icon.png",
        "alias": "UpdateFromRepo",
        "doc": "This button does UpdateFromRepo when left click"
    },
    "Layer.tab\\destroy_layer.button\\destroy_layer_left.py": {
        "script": "Layer.tab\\destroy_layer.button\\destroy_layer_left.py",
        "icon": "Layer.tab\\destroy_layer.button\\icon.png",
        "alias": "DestroyLayer",
        "doc": "Delete selected layers, even if there are objs in it. Helpful when layer tree is constrainted by block usage."
    },
    "Layer.tab\\find_layer_in_files.button\\find_layer_in_files_left.py": {
        "script": "Layer.tab\\find_layer_in_files.button\\find_layer_in_files_left.py",
        "icon": "Layer.tab\\find_layer_in_files.button\\icon.png",
        "alias": "FindLayerInFiles",
        "doc": "In a given folder, find which rhino file contains the keyword layer name. Good for traceback a illustrator file."
    },
    "Layer.tab\\initiate_layers.button\\initiate_layers_left.py": {
        "script": "Layer.tab\\initiate_layers.button\\initiate_layers_left.py",
        "icon": "Layer.tab\\initiate_layers.button\\icon.png",
        "alias": "InitiateLayers",
        "doc": "Initiate layer tree for quick start on programing or facade design."
    },
    "Layer.tab\\isolate_layer_by_selection.button\\isolate_layer_by_selection_left.py": {
        "script": "Layer.tab\\isolate_layer_by_selection.button\\isolate_layer_by_selection_left.py",
        "icon": "Layer.tab\\isolate_layer_by_selection.button\\icon.png",
        "alias": "IsolateLayerBySelection",
        "doc": "This button does IsolateLayerBySelection when left click"
    },
    "Layer.tab\\isolate_layer_by_selection.button\\isolate_layer_by_selection_right.py": {
        "script": "Layer.tab\\isolate_layer_by_selection.button\\isolate_layer_by_selection_right.py",
        "icon": "Layer.tab\\isolate_layer_by_selection.button\\icon.png",
        "alias": "SelectObjectsOnSimilarLayer",
        "doc": "This button does SelectObjsOnSimilarLayer when right click"
    },
    "Layer.tab\\layer_name_format.button\\layer_name_format_left.py": {
        "script": "Layer.tab\\layer_name_format.button\\layer_name_format_left.py",
        "icon": "Layer.tab\\layer_name_format.button\\icon.png",
        "alias": "LayerNameFormat",
        "doc": "Format the spelling of layer name on selected layers."
    },
    "Layer.tab\\merge_layer.button\\merge_layer_left.py": {
        "script": "Layer.tab\\merge_layer.button\\merge_layer_left.py",
        "icon": "Layer.tab\\merge_layer.button\\icon.png",
        "alias": "MergeLayer",
        "doc": "Merge multiple layer to single layer. This process include merging layers owned by blocks."
    },
    "Layer.tab\\nest_layer.button\\nest_layer_left.py": {
        "script": "Layer.tab\\nest_layer.button\\nest_layer_left.py",
        "icon": "Layer.tab\\nest_layer.button\\icon.png",
        "alias": "NestLayer",
        "doc": "Migrate multiple layers under same parent layer. The main benifit is that it can migrate even if same sublayer name exist. This process also handle layers inside blocks."
    },
    "Layer.tab\\random_layer_color.button\\random_layer_color_left.py": {
        "script": "Layer.tab\\random_layer_color.button\\random_layer_color_left.py",
        "icon": "Layer.tab\\random_layer_color.button\\icon.png",
        "alias": "RandomLayerColor",
        "doc": "Randomize the layer color."
    },
    "Layer.tab\\random_layer_color.button\\color_setting_right.py": {
        "script": "Layer.tab\\random_layer_color.button\\color_setting_right.py",
        "icon": "Layer.tab\\random_layer_color.button\\icon.png",
        "alias": "RandomLayerColorSetting",
        "doc": "Change the setting of color style."
    },
    "Material.tab\\import_selected_material.button\\import_selected_material_left.py": {
        "script": "Material.tab\\import_selected_material.button\\import_selected_material_left.py",
        "icon": "Material.tab\\import_selected_material.button\\icon.png",
        "alias": "ImportSelectedMaterial",
        "doc": "Import selected materials from a file."
    },
    "Material.tab\\material_prefix.button\\material_prefix_left.py": {
        "script": "Material.tab\\material_prefix.button\\material_prefix_left.py",
        "icon": "Material.tab\\material_prefix.button\\icon.png",
        "alias": "MaterialPrefix",
        "doc": "Add prefix to material so when sessioning rhino the enscape can treat matreail seperately and not turn white."
    },
    "Material.tab\\merge_materials.button\\merge_materials_left.py": {
        "script": "Material.tab\\merge_materials.button\\merge_materials_left.py",
        "icon": "Material.tab\\merge_materials.button\\icon.png",
        "alias": "MergeMaterials",
        "doc": "Merge multiple materials in the file to the same material. Work for object assigned materials as well."
    },
    "Material.tab\\random_texture_walk.button\\random_texture_walk_left.py": {
        "script": "Material.tab\\random_texture_walk.button\\random_texture_walk_left.py",
        "icon": "c:\\Users\\szhang\\github\\EnneadTab-OS\\DarkSide\\RuiWriter\\.\\default_icon.png",
        "alias": "RandomTextureWalk",
        "doc": "Randomly walk the texture map a bit to avoid them lineup"
    },
    "Material.tab\\remove_string_in_material_name.button\\remove_string_in_material_name_left.py": {
        "script": "Material.tab\\remove_string_in_material_name.button\\remove_string_in_material_name_left.py",
        "icon": "c:\\Users\\szhang\\github\\EnneadTab-OS\\DarkSide\\RuiWriter\\.\\default_icon.png",
        "alias": "RemoveStringInMaterialName",
        "doc": "This button does RemoveStringInMaterialName when left click"
    },
    "Modify.tab\\flatten_mesh_face.button\\flatten_mesh_face_left.py": {
        "script": "Modify.tab\\flatten_mesh_face.button\\flatten_mesh_face_left.py",
        "icon": "Modify.tab\\flatten_mesh_face.button\\icon.png",
        "alias": "FlattenMeshFace",
        "doc": "This button does FlattenMeshFace when left click"
    },
    "Modify.tab\\make_void_seam.button\\make_void_seam_left.py": {
        "script": "Modify.tab\\make_void_seam.button\\make_void_seam_left.py",
        "icon": "Modify.tab\\make_void_seam.button\\icon.png",
        "alias": "MakeVoidSeam",
        "doc": "Make the void cut polysurface based on layer name."
    },
    "Modify.tab\\match_crv_dir.button\\match_crv_dir_left.py": {
        "script": "Modify.tab\\match_crv_dir.button\\match_crv_dir_left.py",
        "icon": "Modify.tab\\match_crv_dir.button\\icon.png",
        "alias": "MatchCrvDir",
        "doc": "This button does MatchCrvDir when left click"
    },
    "Modify.tab\\offset_floor_border.button\\offset_floor_border_left.py": {
        "script": "Modify.tab\\offset_floor_border.button\\offset_floor_border_left.py",
        "icon": "Modify.tab\\offset_floor_border.button\\icon.png",
        "alias": "OffsetFloorBorder",
        "doc": "Shrink/Expand the border of floor for input srf or polysrfs. The thickness is retained if using polysrf."
    },
    "Modify.tab\\push_glass_in.button\\push_glass_in_left.py": {
        "script": "Modify.tab\\push_glass_in.button\\push_glass_in_left.py",
        "icon": "Modify.tab\\push_glass_in.button\\icon.png",
        "alias": "PushGlassIn",
        "doc": "Make pushed in glass recess from selected srfs."
    },
    "Modify.tab\\random_deselect.button\\random_deselect_left.py": {
        "script": "Modify.tab\\random_deselect.button\\random_deselect_left.py",
        "icon": "Modify.tab\\random_deselect.button\\icon.png",
        "alias": "RandomDeselect",
        "doc": "This button does RandomDeselect when left click"
    },
    "Modify.tab\\random_deselect.button\\random_deselect_right.py": {
        "script": "Modify.tab\\random_deselect.button\\random_deselect_right.py",
        "icon": "Modify.tab\\random_deselect.button\\icon.png",
        "alias": "RandomDeselect",
        "doc": "This button does RandomDeselect when left click"
    },
    "Modify.tab\\shape_mapper.button\\shape_mapper_left.py": {
        "script": "Modify.tab\\shape_mapper.button\\shape_mapper_left.py",
        "icon": "Modify.tab\\shape_mapper.button\\icon.png",
        "alias": "ShapeMapper",
        "doc": "This button does ShapeMapper when left click"
    },
    "Modify.tab\\srf_to_panel.button\\srf_to_panel_left.py": {
        "script": "Modify.tab\\srf_to_panel.button\\srf_to_panel_left.py",
        "icon": "c:\\Users\\szhang\\github\\EnneadTab-OS\\DarkSide\\RuiWriter\\.\\default_icon.png",
        "alias": "SrfToPanel",
        "doc": "Convert well defined panelization of surfs to detailed polysrfs with thickness, joint reveal to edge."
    },
    "Modify.tab\\time_travel.button\\time_travel_left.py": {
        "script": "Modify.tab\\time_travel.button\\time_travel_left.py",
        "icon": "Modify.tab\\time_travel.button\\icon.png",
        "alias": "TimeTravel",
        "doc": "This button does TimeTravel when left click"
    },
    "Render.tab\\ai_render.button\\view2render_left.py": {
        "script": "Render.tab\\ai_render.button\\view2render_left.py",
        "icon": "Render.tab\\ai_render.button\\icon.png",
        "alias": "AiRenderingFromView",
        "doc": "Render captured Rhino view with Stable Diffusion."
    },
    "Render.tab\\ai_render.button\\render_upscale_right.py": {
        "script": "Render.tab\\ai_render.button\\render_upscale_right.py",
        "icon": "Render.tab\\ai_render.button\\icon.png",
        "alias": "AiRenderUpscale",
        "doc": "Upscale AI generated images."
    },
    "Render.tab\\import_selected_camera.button\\import_selected_camera_left.py": {
        "script": "Render.tab\\import_selected_camera.button\\import_selected_camera_left.py",
        "icon": "Render.tab\\import_selected_camera.button\\icon.png",
        "alias": "ImportSelectedCamera",
        "doc": "Import seleced camera from another file."
    },
    "Render.tab\\inspect_enscape_setting.button\\inspect_enscape_setting_left.py": {
        "script": "Render.tab\\inspect_enscape_setting.button\\inspect_enscape_setting_left.py",
        "icon": "Render.tab\\inspect_enscape_setting.button\\icon.png",
        "alias": "InspectEnscapeSetting",
        "doc": "This button does InspectEnscapeSetting when left click"
    },
    "Render.tab\\load_enscape_to_psd.button\\load_enscape_to_psd_left.py": {
        "script": "Render.tab\\load_enscape_to_psd.button\\load_enscape_to_psd_left.py",
        "icon": "Render.tab\\load_enscape_to_psd.button\\icon.png",
        "alias": "LoadEnscapeToPsd",
        "doc": "This button does LoadEnscapeToPsd when left click"
    },
    "Render.tab\\make_crv_pipe.button\\make_crv_pipe_left.py": {
        "script": "Render.tab\\make_crv_pipe.button\\make_crv_pipe_left.py",
        "icon": "Render.tab\\make_crv_pipe.button\\icon.png",
        "alias": "MakeCrvPipe",
        "doc": "Make/Update a small pipe along crvs in layers that has '[EDGE]' in it. So coplanar face in enscape can show edge."
    },
    "Render.tab\\rename_enscape_files.button\\rename_enscape_files_left.py": {
        "script": "Render.tab\\rename_enscape_files.button\\rename_enscape_files_left.py",
        "icon": "Render.tab\\rename_enscape_files.button\\icon.png",
        "alias": "RenameEnscapeFiles",
        "doc": "Rename the output of Enscape files to remove the long bit."
    },
    "Revit.tab\\brep_to_mass.button\\brep_to_mass_left.py": {
        "script": "Revit.tab\\brep_to_mass.button\\brep_to_mass_left.py",
        "icon": "Revit.tab\\brep_to_mass.button\\icon.png",
        "alias": "BrepToMass",
        "doc": "Using faces of the brep to recreate a freeform mass in Revit."
    },
    "Revit.tab\\draft_insulation_batting.button\\draft_insulation_batting_left.py": {
        "script": "Revit.tab\\draft_insulation_batting.button\\draft_insulation_batting_left.py",
        "icon": "Revit.tab\\draft_insulation_batting.button\\icon.png",
        "alias": "DraftInsulationBatting",
        "doc": "Given base crvs and thickness, it makes a 2D insulation batting graphic that can be any shape. "
    },
    "Revit.tab\\export_camera_to_revit.button\\export_camera_to_revit_left.py": {
        "script": "Revit.tab\\export_camera_to_revit.button\\export_camera_to_revit_left.py",
        "icon": "Revit.tab\\export_camera_to_revit.button\\icon.png",
        "alias": "ExportCameraToRevit",
        "doc": "You can recreate same 3D camera in Revit by exporting cameras from Rhino here first."
    },
    "Revit.tab\\export_for_rhino2revit.button\\export_for_rhino2revit_left.py": {
        "script": "Revit.tab\\export_for_rhino2revit.button\\export_for_rhino2revit_left.py",
        "icon": "Revit.tab\\export_for_rhino2revit.button\\icon.png",
        "alias": "ExportForRhino2Revit",
        "doc": "Export Layer Contents to 3dm and dwg for Rhino2Revit in EnneadTab for Revit."
    },
    "Revit.tab\\floor_drafter.button\\floor_drafter_left.py": {
        "script": "Revit.tab\\floor_drafter.button\\floor_drafter_left.py",
        "icon": "c:\\Users\\szhang\\github\\EnneadTab-OS\\DarkSide\\RuiWriter\\.\\default_icon.png",
        "alias": "FloorDrafter",
        "doc": "This button does FloorDrafter when left click"
    },
    "Revit.tab\\import_revit_collection.button\\import_revit_collection_left.py": {
        "script": "Revit.tab\\import_revit_collection.button\\import_revit_collection_left.py",
        "icon": "Revit.tab\\import_revit_collection.button\\icon.png",
        "alias": "ImportRevitCollection",
        "doc": "This button does ImportRevitCollection when left click"
    },
    "Revit.tab\\map_block_transform.button\\map_block_transform_left.py": {
        "script": "Revit.tab\\map_block_transform.button\\map_block_transform_left.py",
        "icon": "Revit.tab\\map_block_transform.button\\icon.png",
        "alias": "MapBlockTransform",
        "doc": "Send the transformation of the blocks to Revit to be used by space adaptive family. This is the only known way of doing true free 3D orientation in Revit."
    },
    "Revit.tab\\map_revit_subc_material.button\\map_revit_subc_material_left.py": {
        "script": "Revit.tab\\map_revit_subc_material.button\\map_revit_subc_material_left.py",
        "icon": "Revit.tab\\map_revit_subc_material.button\\icon.png",
        "alias": "MapRevitSubCategoryMaterial",
        "doc": "Work with ExportSubCategoryMaterialTable on revit side. After you export the OST mapping there, this button help you create and map layer material based on layer name, if found in the OST mapping"
    },
    "Revit.tab\\revit_drafter.button\\revit_drafter_left.py": {
        "script": "Revit.tab\\revit_drafter.button\\revit_drafter_left.py",
        "icon": "Revit.tab\\revit_drafter.button\\icon.png",
        "alias": "RevitDrafterImport",
        "doc": "Receive the drafting background from Revit and setup layer trees for supporting line style and filled region types."
    },
    "Revit.tab\\revit_drafter.button\\revit_drafter_right.py": {
        "script": "Revit.tab\\revit_drafter.button\\revit_drafter_right.py",
        "icon": "Revit.tab\\revit_drafter.button\\icon.png",
        "alias": "RevitDrafterExport",
        "doc": "Send the draft content back to Revit."
    },
    "Revit.tab\\surface_to_adaptive_component.button\\surface_to_adaptive_component_left.py": {
        "script": "Revit.tab\\surface_to_adaptive_component.button\\surface_to_adaptive_component_left.py",
        "icon": "Revit.tab\\surface_to_adaptive_component.button\\icon.png",
        "alias": "SurfaceToAdaptiveComponent",
        "doc": "Use the corners of the input surfs as the marker for the adaptive pts in Revit."
    },
    "Tailor.tab\\export_without_crv.button\\export_without_crv_left.py": {
        "script": "Tailor.tab\\export_without_crv.button\\export_without_crv_left.py",
        "icon": "c:\\Users\\szhang\\github\\EnneadTab-OS\\DarkSide\\RuiWriter\\.\\default_icon.png",
        "alias": "(1634)ExportWithoutCrv",
        "doc": "Export the rhino file as dwg but solidate all blocks and remove all crvs."
    },
    "Tailor.tab\\relocate_file.button\\relocate_left.py": {
        "script": "Tailor.tab\\relocate_file.button\\relocate_left.py",
        "icon": "c:\\Users\\szhang\\github\\EnneadTab-OS\\DarkSide\\RuiWriter\\.\\default_icon.png",
        "alias": "(1634)RelocateAll",
        "doc": "Relocate all the cameras and models to new Revit location."
    },
    "Tailor.tab\\stack_enscape.button\\stack_enscape_left.py": {
        "script": "Tailor.tab\\stack_enscape.button\\stack_enscape_left.py",
        "icon": "Tailor.tab\\stack_enscape.button\\icon.png",
        "alias": "Stack PSD",
        "doc": null
    },
    "Tailor.tab\\stack_enscape.button\\move_img_right.py": {
        "script": "Tailor.tab\\stack_enscape.button\\move_img_right.py",
        "icon": "Tailor.tab\\stack_enscape.button\\icon.png",
        "alias": null,
        "doc": null
    },
    "View.tab\\batch_rename_camera.button\\batch_rename_camera_left.py": {
        "script": "View.tab\\batch_rename_camera.button\\batch_rename_camera_left.py",
        "icon": "View.tab\\batch_rename_camera.button\\icon.png",
        "alias": "BatchRenameCamera",
        "doc": "This button does BatchRenameCamera when left click"
    },
    "View.tab\\change_object_display_source.button\\change_object_display_source_left.py": {
        "script": "View.tab\\change_object_display_source.button\\change_object_display_source_left.py",
        "icon": "View.tab\\change_object_display_source.button\\icon.png",
        "alias": "ChangeObjectDisplaySource",
        "doc": "This button does ChangeObjectDisplaySource when left click"
    },
    "View.tab\\section_box.button\\section_box_left.py": {
        "script": "View.tab\\section_box.button\\section_box_left.py",
        "icon": "View.tab\\section_box.button\\icon.png",
        "alias": "SectionboxByBoundingBox",
        "doc": "Similar to Revit SectionBox, this will crop the view to just around the selected elements region. In Rhino display mode all clipper is supported. In Enscape only one of the clipper will be recognized."
    },
    "View.tab\\section_box.button\\section_box_right.py": {
        "script": "View.tab\\section_box.button\\section_box_right.py",
        "icon": "View.tab\\section_box.button\\icon.png",
        "alias": "SectionboxByPolysrf",
        "doc": "Use closed polysrf as input box cutter."
    },
    "View.tab\\section_box_cleanup.button\\section_box_cleanup_left.py": {
        "script": "View.tab\\section_box_cleanup.button\\section_box_cleanup_left.py",
        "icon": "View.tab\\section_box_cleanup.button\\icon.png",
        "alias": "SectionBoxCleanup",
        "doc": "Reset the view to unbounded."
    },
    "View.tab\\toggle_layer_pointer.button\\toggle_layer_pointer_left.py": {
        "script": "View.tab\\toggle_layer_pointer.button\\toggle_layer_pointer_left.py",
        "icon": "View.tab\\toggle_layer_pointer.button\\icon.png",
        "alias": "ToggleLayerPointer",
        "doc": "Short list layers with objs that is visible on screen. This is a good way to quickly examine the layer structure in your model space."
    },
    "Web.tab\\miro.button\\listen_to_miro_left.py": {
        "script": "Web.tab\\miro.button\\listen_to_miro_left.py",
        "icon": "Web.tab\\miro.button\\icon.png",
        "alias": "ListenToMiro",
        "doc": "Listen to changes in the miro"
    },
    "Web.tab\\miro.button\\push_to_miro_right.py": {
        "script": "Web.tab\\miro.button\\push_to_miro_right.py",
        "icon": "Web.tab\\miro.button\\icon.png",
        "alias": "PushToMiro",
        "doc": "Push selected elements in Rhino to Miro. Only support text and rect and circle."
    }
}